# Docker Compose para producci√≥n
version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: fciencias_postgres_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: fciencias_app
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - fciencias_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fciencias_backend_prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/fciencias_app
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      FRONTEND_URL: https://fciencias.app
    ports:
      - "4001:4001"
    depends_on:
      - postgres
    networks:
      - fciencias_network

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: https://api.fciencias.app/api/v1
    container_name: fciencias_frontend_prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    networks:
      - fciencias_network

  # Reverse Proxy (Nginx)
  nginx:
    image: nginx:alpine
    container_name: fciencias_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./ops/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ops/nginx/ssl:/etc/nginx/ssl:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - frontend
      - backend
    networks:
      - fciencias_network

volumes:
  postgres_data:

networks:
  fciencias_network:
    driver: bridge
